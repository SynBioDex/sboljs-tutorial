{
  "_args": [
    [
      "rdf-parser-abstract@https://registry.npmjs.org/rdf-parser-abstract/-/rdf-parser-abstract-0.3.0.tgz",
      "/home/chris/Desktop/Dev/sboljs-tutorial/node_modules/sboljs/node_modules/rdf-parser-rdfxml/node_modules/rdf-parser-dom"
    ]
  ],
  "_from": "rdf-parser-abstract@https://registry.npmjs.org/rdf-parser-abstract/-/rdf-parser-abstract-0.3.0.tgz",
  "_id": "rdf-parser-abstract@0.3.0",
  "_inCache": true,
  "_location": "/sboljs/rdf-parser-rdfxml/rdf-parser-dom/rdf-parser-abstract",
  "_phantomChildren": {},
  "_requested": {
    "name": "rdf-parser-abstract",
    "raw": "rdf-parser-abstract@https://registry.npmjs.org/rdf-parser-abstract/-/rdf-parser-abstract-0.3.0.tgz",
    "rawSpec": "https://registry.npmjs.org/rdf-parser-abstract/-/rdf-parser-abstract-0.3.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/rdf-parser-abstract/-/rdf-parser-abstract-0.3.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/sboljs/rdf-parser-rdfxml/rdf-parser-dom"
  ],
  "_resolved": "https://registry.npmjs.org/rdf-parser-abstract/-/rdf-parser-abstract-0.3.0.tgz",
  "_shasum": "ea01f6cc5ae68593325d44afc0b5483533023e2e",
  "_shrinkwrap": null,
  "_spec": "rdf-parser-abstract@https://registry.npmjs.org/rdf-parser-abstract/-/rdf-parser-abstract-0.3.0.tgz",
  "_where": "/home/chris/Desktop/Dev/sboljs-tutorial/node_modules/sboljs/node_modules/rdf-parser-rdfxml/node_modules/rdf-parser-dom",
  "author": {
    "email": "bergi@axolotlfarm.org",
    "name": "Thomas Bergwinkl",
    "url": "https://www.bergnet.org/people/bergi/card#me"
  },
  "bugs": {
    "url": "https://github.com/rdf-ext/rdf-parser-abstract/issues"
  },
  "dependencies": {
    "concat-stream": "^1.5.0",
    "mocha": "^2.3.3"
  },
  "description": "Abstract base class for RDF Interface parser implementations",
  "devDependencies": {},
  "homepage": "https://github.com/rdf-ext/rdf-parser-abstract",
  "keywords": [
    "data",
    "linked",
    "rdf",
    "rdf-parser"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "rdf-parser-abstract",
  "optionalDependencies": {},
  "readme": "# rdf-parser-abstract\n\n[![Build Status](https://travis-ci.org/rdf-ext/rdf-parser-abstract.svg?branch=master)](https://travis-ci.org/rdf-ext/rdf-parser-abstract)\n[![NPM Version](https://img.shields.io/npm/v/rdf-parser-abstract.svg?style=flat)](https://npm.im/rdf-parser-abstract)\n\nAbstract base class for RDF-Interfaces parser implementations.\n\n## Usage\n\nThe `AbstractParser` class adds default implementations for `.parse(data, callback, base, filter, graph)` and `.stream(inputStream, base, filter)`.\nOnly the `.process(data, callback, base, filter, done)` method must be implemented.\n\nYour own parser hast to inherit from the abstract parser.\nFirst let's install the package.\nStart a terminal and run:\n\n\tnpm install rdf-abstract-parser --save\n\nNow let's start coding.\nTo inherit from the abstract parser, we have to load the util and the `AbstractParser` itself first:\n\n\tvar util = require('util')\n\tvar AbstractParser = require('rdf-abstract-parser')\n\nYour parser must accept the optional parameter `rdf` to use the given RDF environment.\nTo initialize the `AbstractParser`, you have to call the `AbstractParser` constructor in your own constructor.\n\n\tfunction YourParser (options) {\n\t  // use the given RDF environment or RDF-Ext if none was given\n\t  this.rdf = options.rdf || require('rdf-ext')\n\n    // call the AbstractParser constructor\n\t  AbstractParser.call(this, rdf)\n\t}\n\nAfter the constructor code you have to inherit with the `util.inherits` function.\n\n\tutil.inherits(YourParser, AbstractParser)\n\nOnly the `.process` method is required to be implemented.\nThe `base` parameter is optional, let's check if it is given and createt a `NamedNode` from the string, so we can use it for the `graph` property for the quads.\nThe `filter` parameter is optional, so let's assign a accept all triples filter, if none was given.\nFinally you can implement your parser code.\nThe example code accepts strings with one triple per line and spo space separated and only named node without additional escaping.\nTo parse the string we only have to split the string per line and than split every line into spo.\nFor every spo we create a quad with the RDF environment and check if the filter accepts the quad.\nIf the filter accepts the quad we can forward it.\nThat's it, your parser is complete!\n\n\tYourParser.prototype.process = function (data, callback, base, filter, done) {\n\t  var self = this\n\n    // create a NamedNode if the base parameter is given\n    base = !!base ? null : self.rdf.createNamedNode(base.toString())\n\n\t  // use a accept all triples filter, if none was given\n\t  filter = filter || function () {\n\t    return true\n\t  }\n\n\t  // split string into triples\n\t  data.split('\\n').forEach(function (line) {\n\t    // split triple into spo\n\t    var spo = line.split(' ')\n\n\t    // create the Quad using the RDF environment\n\t    var quad = self.rdf.createQuad(\n\t      self.rdf.createNamedNode(spo[0]),\n\t      self.rdf.createNamedNode(spo[1]),\n\t      self.rdf.createNamedNode(spo[2]),\n\t      base)\n\n      // only forward the quad if the filter accepts it\n\t    if (filter(quad)) {\n\t      // forward the quad\n      \tcallback(quad)\n      }\n\t  })\n\t}\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rdf-ext/rdf-parser-abstract.git"
  },
  "scripts": {
    "lint": "standard"
  },
  "version": "0.3.0"
}
